1)
((lambda (x) (+ (* 2 x) 3)) 4)
((lambda (x y) (* (+ x 2) (+ y 6))) 7 8)
((lambda (v) ((lambda (x) (* 3 x)) (+ v 2))) 8)
((lambda (v) ((lambda (x) (* v x)) (+ v 2))) 8)
((lambda (v) ((lambda (v) (* 3 v)) (+ v 2))) 8)
((lambda (x y z) (+ (* x y) (* y z))) 2 3 4)
((lambda (x y) (* x x y y)) 4) // manque un argument
((lambda (x) (* x x 2)) 4 5) // trop d'arguments
(lambda (x) (* x x 2)) // absence d'argument

2)
(defun f (x) (+ 3 x))
(defun g (v) (* 5 (f (+ v 2)))) 

(defun f (x) (+ v x)) 

(defun fact (x) (if (= x 1) 1 (* x (fact (- x 1)))))

(defun fibo (x) (if (< x 2) (if (= x 1) 1 0) (+ (fibo (- x 1)) (fibo (- x 2)))))  

3)
() = NIL
(car '(())) = NIL
(car '((()))) = (NIL)
(car (car '((())))) = NIL

(1 2 3 4) => 4 
(1 (2 3) 4) => 3 dont 1 sous-liste de 2 
(1 (2) (3) 4) => 4 dont 2 sous-liste de 1

4)
(defun membre (x l) (if (atom l) NIL (if (= x (car l)) l (membre x (cdr l)))))

(defun taille (l) (if (atom l) 0 (+ 1 (taille (cdr l)))))

(defun dernier (l) (if (atom l) NIL (if (equal (cdr l) NIL) (car l) (dernier (cdr l)))))

(defun listeOrdreDecroissant (n) (if (= n 0) '() (cons n (listeOrdreDecroissant (- n 1)))))
(defun listeOrdreCroissant (n) (if (= n 0) '() (append (listeOrdreCroissant (- n 1)) (cons n '()))))

(defun copieListe (l) (if (atom l) '() (cons (car l) (copieListe (cdr l)))))

(defun supprime (l x) (if (atom l) '() (if (equal (car l) x) (supprime (cdr l) x) (cons (car l) (supprime (cdr l) x)))))
(defun supprimePremierOcc (l x) (if (atom l) '() (if (equal (car l) x) (cdr l) (cons (car l) (supprimePremierOcc (cdr l) x)))))

(defun concatenation (l1 l2) (if (atom l1) (if (atom l2) NIL (cons (car l2) (concatenation l1 (cdr l2)))) (cons (car l1) (concatenation (cdr l1) l2))))

(defun estPresent (l x) (if (atom l) NIL (if (equal x (car l)) t (estPresent (cdr l) x))))

(defun ajoutSiPasPresent (l x) (if (atom l) (cons x l) (if (equal x (car l)) (cons (car l) (cdr l)) (cons (car l) (ajoutSiPasPresent (cdr l) x)))))
// liste l reconstruite par recopie

//tailles egales
(defun correspondanceListe (l1 l2) (if (equal l1 NIL) NIL (if (equal l2 NIL) NIL (cons (cons (car l1) (car l2)) (correspondanceListe (cdr l1) (cdr l2))))))
//Cas des tailles inegales
(defun correspondanceListe (l1 l2) 
		(if (equal l1 NIL) 
			(if (equal l2 NIL) 
				NIL 
				(cons (cons (car l2) '()) (correspondanceListe l1 (cdr l2)))
			)
 
			(if (equal l2 NIL) 
				(cons (cons (car l1) '()) (correspondanceListe (cdr l1) l2)) 
				(cons (cons (car l1) (car l2)) (correspondanceListe (cdr l1) (cdr l2)))
			)
		)
)


5)
// cas feuille
(defun tailleTree (tree) (if (atom tree) 1 (+ (tailleTree (car tree)) (tailleTree (cdr tree)))))
// cas feuille non null
(defun tailleTree (tree) (if (atom tree) (if (equal tree '()) 0 1) (+ (tailleTree (car tree)) (tailleTree (cdr tree)))))
// cas cellule
(defun tailleTree (tree) (if (atom tree) 0 (+ 1 (tailleTree (car tree)) (tailleTree (cdr tree)))))

(defun copieTree (tree) (if (atom tree) tree (cons (copieTree (car tree)) (copieTree (cdr tree)))))

(defun substitutionTree (x y tree) (if (atom tree) (if (equal x tree) y tree) (cons (substitutionTree x y (car tree)) (substitutionTree x y (cdr tree)))))
//gerer le cas où x et y ne sont pas des atomes...

(defun listeFeuilles (tree) (if (atom tree) (cons tree '()) (append (listeFeuilles (car tree)) (listeFeuilles (cdr tree)))))
(defun listeFeuilles (tree) (if (atom tree) (cons tree '()) (append (listeFeuilles (car tree)) (listeFeuilles (cdr tree)))))

//Pas sur...
(defun miroirTree (tree) (if (atom tree) tree (cons (miroirTree (cdr tree)) (miroirTree (car tree)))))

(defun profondeurTree (tree) (if (atom tree) 0 (max (+ 1 (profondeurTree (car tree))) (profondeurTree (cdr tree)))))

//tailles egales
(defun correspondanceTree (t1 t2) (if (and (atom t1) (atom t2)) (cons t1 t2) (cons (correspondanceTree (car t1) (car t2)) (correspondanceTree (cdr t1) (cdr t2))))) 
//tailles inegales
(defun correspondanceTree (t1 t2) (if (and (atom t1) (atom t2)) (cons t1 t2) (if (atom t1) (cons (correspondanceTree t1 (car t2)) (correspondanceTree t1 (cdr t2))) (if (atom t2) (cons (correspondanceTree (car t1) t2) (correspondanceTree (cdr t1) t2)) (cons (correspondanceTree (car t1) (car t2)) (correspondanceTree (cdr t1) (cdr t2))))))) 
==> gerer le cas d'un atome '() (la flemme)

6) 
(eq (cons 1 2) (cons 1 2)) => NIL
(eq '(1 . 2) (cons 1 2)) => NIL
(eq '(1 . 2) '(1 . 2)) => NIL
(equal (cons 1 2) (cons 1 2)) => T
(equal '(1 . 2) (cons 1 2)) => T
(equal '(1 . 2) '(1 . 2)) => T
((lambda (x) (eq x x)) (cons 1 2)) => T
((lambda (x) (equal x x)) (cons 1 2)) => T

(equal (fact x) (fact x)) => T 
(eq (fact x) (fact x)) => T puis NIL à une certaine valeur
(eql (fact x) (fact x)) => T 

equal ==> comparaison recursive (comparaison d'objet)
eq ==> comparaison simple

7)
*** Recursivité terminal ***
(defun membre (x l r) (if (atom l) r (if (= x (car l)) l (membre x (cdr l) (cdr l)))))

(defun taille (l r) (if (atom l) r (taille (cdr l) (+ 1 r))))

(defun dernier (l r) (if (atom l) r (if (equal (cdr l) NIL) (car l) (dernier (cdr l) (cdr l)))))

(defun listeOrdreDecroissant (n r) (if (= n 0) r (listeOrdreDecroissant (- n 1) (cons n r))))

// faire la suite

